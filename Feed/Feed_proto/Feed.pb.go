// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Feed.proto

/*
Package Feed_proto is a generated protocol buffer package.

It is generated from these files:
	Feed.proto

It has these top-level messages:
	StatusResponse
	Auth
	UserInfo
	ObjectInfo
	FeedItem
	FeedRequest
	AddFeedItemRequest
	AddFeedItemResponse
	FeedResponse
	FollowRequest
	FollowResponse
	UnfollowRequest
	UnfollowResponse
	RegisterRequest
	RegisterResponse
	LoginRequest
	LoginResponse
*/
package Feed_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Verb describes the verb of the activity
type Verb int32

const (
	// this verb ensures the activity is ignored
	Verb_IGNORE Verb = 0
	// this is used to display a generic feed type
	Verb_GENERIC Verb = 1
	Verb_LIKE    Verb = 2
	Verb_SHARE   Verb = 3
	Verb_POST    Verb = 4
)

var Verb_name = map[int32]string{
	0: "IGNORE",
	1: "GENERIC",
	2: "LIKE",
	3: "SHARE",
	4: "POST",
}
var Verb_value = map[string]int32{
	"IGNORE":  0,
	"GENERIC": 1,
	"LIKE":    2,
	"SHARE":   3,
	"POST":    4,
}

func (x Verb) String() string {
	return proto.EnumName(Verb_name, int32(x))
}
func (Verb) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// StatusResponse is the response sent by the server with every response
type StatusResponse struct {
	Code  int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error bool   `protobuf:"varint,2,opt,name=error" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StatusResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *StatusResponse) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *StatusResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Auth container for uses to authenticate against APIs
// This data be provided by Acoount Login API
type Auth struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Auth) Reset()                    { *m = Auth{} }
func (m *Auth) String() string            { return proto.CompactTextString(m) }
func (*Auth) ProtoMessage()               {}
func (*Auth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Auth) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// UserInfo describes a user
type UserInfo struct {
	UserName  string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Email     string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Id        string `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ObjectInfo struct {
	// TODO should type be an enum ?
	// type of object
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// identifier of object
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ObjectInfo) Reset()                    { *m = ObjectInfo{} }
func (m *ObjectInfo) String() string            { return proto.CompactTextString(m) }
func (*ObjectInfo) ProtoMessage()               {}
func (*ObjectInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ObjectInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ObjectInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// FeedItem describes a single item in the feed
type FeedItem struct {
	// ID of this feed item
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// user who performed this activity
	Actor string `protobuf:"bytes,2,opt,name=actor" json:"actor,omitempty"`
	// the type of activity
	Verb Verb `protobuf:"varint,3,opt,name=verb,enum=Feed_proto.Verb" json:"verb,omitempty"`
	// this field is used to describe how the activity should
	// be handled by older clients when a new activity is added
	CompatibilityVerb Verb `protobuf:"varint,4,opt,name=compatibility_verb,json=compatibilityVerb,enum=Feed_proto.Verb" json:"compatibility_verb,omitempty"`
	// object on which this activity occured
	Object string `protobuf:"bytes,5,opt,name=object" json:"object,omitempty"`
	// target of user for this activity
	Target string `protobuf:"bytes,6,opt,name=target" json:"target,omitempty"`
}

func (m *FeedItem) Reset()                    { *m = FeedItem{} }
func (m *FeedItem) String() string            { return proto.CompactTextString(m) }
func (*FeedItem) ProtoMessage()               {}
func (*FeedItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FeedItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeedItem) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *FeedItem) GetVerb() Verb {
	if m != nil {
		return m.Verb
	}
	return Verb_IGNORE
}

func (m *FeedItem) GetCompatibilityVerb() Verb {
	if m != nil {
		return m.CompatibilityVerb
	}
	return Verb_IGNORE
}

func (m *FeedItem) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *FeedItem) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

// FeedRequest contains request parameters to fetch feed
type FeedRequest struct {
	// Auth information for this request
	Auth *Auth `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	// number of items to fetch
	Count int32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	// if userID is present we fetch feed OF that user
	UserID string `protobuf:"bytes,3,opt,name=userID" json:"userID,omitempty"`
}

func (m *FeedRequest) Reset()                    { *m = FeedRequest{} }
func (m *FeedRequest) String() string            { return proto.CompactTextString(m) }
func (*FeedRequest) ProtoMessage()               {}
func (*FeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FeedRequest) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *FeedRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FeedRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type AddFeedItemRequest struct {
	Auth *Auth     `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Item *FeedItem `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *AddFeedItemRequest) Reset()                    { *m = AddFeedItemRequest{} }
func (m *AddFeedItemRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFeedItemRequest) ProtoMessage()               {}
func (*AddFeedItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddFeedItemRequest) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *AddFeedItemRequest) GetItem() *FeedItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddFeedItemResponse struct {
	Status *StatusResponse `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Id     string          `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *AddFeedItemResponse) Reset()                    { *m = AddFeedItemResponse{} }
func (m *AddFeedItemResponse) String() string            { return proto.CompactTextString(m) }
func (*AddFeedItemResponse) ProtoMessage()               {}
func (*AddFeedItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddFeedItemResponse) GetStatus() *StatusResponse {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AddFeedItemResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// FeedResponse contains all fields needed to be fetched by the user
type FeedResponse struct {
	Status *StatusResponse `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Items  []*FeedItem     `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *FeedResponse) Reset()                    { *m = FeedResponse{} }
func (m *FeedResponse) String() string            { return proto.CompactTextString(m) }
func (*FeedResponse) ProtoMessage()               {}
func (*FeedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FeedResponse) GetStatus() *StatusResponse {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FeedResponse) GetItems() []*FeedItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type FollowRequest struct {
	Auth        *Auth  `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	FollowingId string `protobuf:"bytes,3,opt,name=followingId" json:"followingId,omitempty"`
}

func (m *FollowRequest) Reset()                    { *m = FollowRequest{} }
func (m *FollowRequest) String() string            { return proto.CompactTextString(m) }
func (*FollowRequest) ProtoMessage()               {}
func (*FollowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FollowRequest) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *FollowRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FollowRequest) GetFollowingId() string {
	if m != nil {
		return m.FollowingId
	}
	return ""
}

type FollowResponse struct {
	Status *StatusResponse `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *FollowResponse) Reset()                    { *m = FollowResponse{} }
func (m *FollowResponse) String() string            { return proto.CompactTextString(m) }
func (*FollowResponse) ProtoMessage()               {}
func (*FollowResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FollowResponse) GetStatus() *StatusResponse {
	if m != nil {
		return m.Status
	}
	return nil
}

type UnfollowRequest struct {
	Auth        *Auth  `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	FollowingId string `protobuf:"bytes,3,opt,name=followingId" json:"followingId,omitempty"`
}

func (m *UnfollowRequest) Reset()                    { *m = UnfollowRequest{} }
func (m *UnfollowRequest) String() string            { return proto.CompactTextString(m) }
func (*UnfollowRequest) ProtoMessage()               {}
func (*UnfollowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UnfollowRequest) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *UnfollowRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UnfollowRequest) GetFollowingId() string {
	if m != nil {
		return m.FollowingId
	}
	return ""
}

type UnfollowResponse struct {
	Status *StatusResponse `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *UnfollowResponse) Reset()                    { *m = UnfollowResponse{} }
func (m *UnfollowResponse) String() string            { return proto.CompactTextString(m) }
func (*UnfollowResponse) ProtoMessage()               {}
func (*UnfollowResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UnfollowResponse) GetStatus() *StatusResponse {
	if m != nil {
		return m.Status
	}
	return nil
}

type RegisterRequest struct {
	UserName  string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Password  string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Email     string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	FirstName string `protobuf:"bytes,5,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,6,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RegisterRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RegisterRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *RegisterRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type RegisterResponse struct {
	Status *StatusResponse `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	User   *UserInfo       `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RegisterResponse) GetStatus() *StatusResponse {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RegisterResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type LoginRequest struct {
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *LoginRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Status *StatusResponse `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Auth   *Auth           `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
	User   *UserInfo       `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *LoginResponse) GetStatus() *StatusResponse {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *LoginResponse) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *LoginResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*StatusResponse)(nil), "Feed_proto.StatusResponse")
	proto.RegisterType((*Auth)(nil), "Feed_proto.Auth")
	proto.RegisterType((*UserInfo)(nil), "Feed_proto.UserInfo")
	proto.RegisterType((*ObjectInfo)(nil), "Feed_proto.ObjectInfo")
	proto.RegisterType((*FeedItem)(nil), "Feed_proto.FeedItem")
	proto.RegisterType((*FeedRequest)(nil), "Feed_proto.FeedRequest")
	proto.RegisterType((*AddFeedItemRequest)(nil), "Feed_proto.AddFeedItemRequest")
	proto.RegisterType((*AddFeedItemResponse)(nil), "Feed_proto.AddFeedItemResponse")
	proto.RegisterType((*FeedResponse)(nil), "Feed_proto.FeedResponse")
	proto.RegisterType((*FollowRequest)(nil), "Feed_proto.FollowRequest")
	proto.RegisterType((*FollowResponse)(nil), "Feed_proto.FollowResponse")
	proto.RegisterType((*UnfollowRequest)(nil), "Feed_proto.UnfollowRequest")
	proto.RegisterType((*UnfollowResponse)(nil), "Feed_proto.UnfollowResponse")
	proto.RegisterType((*RegisterRequest)(nil), "Feed_proto.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "Feed_proto.RegisterResponse")
	proto.RegisterType((*LoginRequest)(nil), "Feed_proto.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "Feed_proto.LoginResponse")
	proto.RegisterEnum("Feed_proto.Verb", Verb_name, Verb_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Feed service

type FeedClient interface {
	// Fetch fetches the activity feed
	FetchFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error)
	// Adds an item to the feed
	AddFeed(ctx context.Context, in *AddFeedItemRequest, opts ...grpc.CallOption) (*AddFeedItemResponse, error)
}

type feedClient struct {
	cc *grpc.ClientConn
}

func NewFeedClient(cc *grpc.ClientConn) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) FetchFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error) {
	out := new(FeedResponse)
	err := grpc.Invoke(ctx, "/Feed_proto.Feed/FetchFeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) AddFeed(ctx context.Context, in *AddFeedItemRequest, opts ...grpc.CallOption) (*AddFeedItemResponse, error) {
	out := new(AddFeedItemResponse)
	err := grpc.Invoke(ctx, "/Feed_proto.Feed/AddFeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Feed service

type FeedServer interface {
	// Fetch fetches the activity feed
	FetchFeed(context.Context, *FeedRequest) (*FeedResponse, error)
	// Adds an item to the feed
	AddFeed(context.Context, *AddFeedItemRequest) (*AddFeedItemResponse, error)
}

func RegisterFeedServer(s *grpc.Server, srv FeedServer) {
	s.RegisterService(&_Feed_serviceDesc, srv)

}

func _Feed_FetchFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).FetchFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Feed_proto.Feed/FetchFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).FetchFeed(ctx, req.(*FeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_AddFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).AddFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Feed_proto.Feed/AddFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).AddFeed(ctx, req.(*AddFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Feed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Feed_proto.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchFeed",
			Handler:    _Feed_FetchFeed_Handler,
		},
		{
			MethodName: "AddFeed",
			Handler:    _Feed_AddFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Feed.proto",
}

// Client API for Follow service

type FollowClient interface {
	AddFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
	RemoveFollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error)
}

type followClient struct {
	cc *grpc.ClientConn
}

func NewFollowClient(cc *grpc.ClientConn) FollowClient {
	return &followClient{cc}
}

func (c *followClient) AddFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	out := new(FollowResponse)
	err := grpc.Invoke(ctx, "/Feed_proto.Follow/AddFollow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) RemoveFollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error) {
	out := new(UnfollowResponse)
	err := grpc.Invoke(ctx, "/Feed_proto.Follow/RemoveFollow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Follow service

type FollowServer interface {
	AddFollow(context.Context, *FollowRequest) (*FollowResponse, error)
	RemoveFollow(context.Context, *UnfollowRequest) (*UnfollowResponse, error)
}

func RegisterFollowServer(s *grpc.Server, srv FollowServer) {
	s.RegisterService(&_Follow_serviceDesc, srv)

}

func _Follow_AddFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).AddFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Feed_proto.Follow/AddFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).AddFollow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_RemoveFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).RemoveFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Feed_proto.Follow/RemoveFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).RemoveFollow(ctx, req.(*UnfollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Follow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Feed_proto.Follow",
	HandlerType: (*FollowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFollow",
			Handler:    _Follow_AddFollow_Handler,
		},
		{
			MethodName: "RemoveFollow",
			Handler:    _Follow_RemoveFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Feed.proto",
}

// Client API for Account service

type AccountClient interface {
	// Register register's a user account in the system
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

func NewAccountClient(cc *grpc.ClientConn) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/Feed_proto.Account/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/Feed_proto.Account/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountServer interface {
	// Register register's a user account in the system
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
}

func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
	s.RegisterService(&_Account_serviceDesc, srv)

}

func _Account_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Feed_proto.Account/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Feed_proto.Account/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Feed_proto.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Account_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Account_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Feed.proto",
}

func init() { proto.RegisterFile("Feed.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x4f, 0xdb, 0x48,
	0x14, 0xc7, 0x8e, 0x1d, 0xec, 0x17, 0x08, 0xde, 0x59, 0xb4, 0x1b, 0x0c, 0xbb, 0x1b, 0x59, 0x7b,
	0x88, 0x38, 0xa0, 0x55, 0xf6, 0xce, 0x6e, 0xb4, 0x24, 0xd9, 0x94, 0x08, 0xaa, 0xa1, 0x54, 0xea,
	0x09, 0x39, 0xf1, 0x24, 0xb8, 0x8d, 0x3d, 0xc1, 0x9e, 0x80, 0xf8, 0x08, 0xbd, 0xb6, 0x52, 0x2f,
	0xbd, 0xf5, 0xcb, 0xf4, 0x6b, 0x55, 0xf3, 0xc7, 0x49, 0x1c, 0x12, 0x10, 0x8d, 0xd4, 0x9b, 0xdf,
	0xff, 0xdf, 0xfb, 0xcd, 0x7b, 0xcf, 0x00, 0x2d, 0x42, 0x82, 0xa3, 0x71, 0x42, 0x19, 0x45, 0xe2,
	0xfb, 0x4a, 0x7c, 0x7b, 0x5d, 0x28, 0x5f, 0x30, 0x9f, 0x4d, 0x52, 0x4c, 0xd2, 0x31, 0x8d, 0x53,
	0x82, 0x10, 0x18, 0x7d, 0x1a, 0x90, 0x8a, 0x56, 0xd5, 0x6a, 0x26, 0x16, 0xdf, 0x68, 0x17, 0x4c,
	0x92, 0x24, 0x34, 0xa9, 0xe8, 0x55, 0xad, 0x66, 0x61, 0x29, 0x20, 0x07, 0x0a, 0x51, 0x3a, 0xac,
	0x14, 0xaa, 0x5a, 0xcd, 0xc6, 0xfc, 0xd3, 0x3b, 0x00, 0xa3, 0x31, 0x61, 0xd7, 0xdc, 0x9f, 0xd1,
	0x77, 0x24, 0x16, 0x49, 0x6c, 0x2c, 0x05, 0xef, 0xbd, 0x06, 0xd6, 0x65, 0x4a, 0x92, 0x4e, 0x3c,
	0xa0, 0x68, 0x1f, 0xec, 0x49, 0x4a, 0x92, 0xab, 0xd8, 0x8f, 0x88, 0x72, 0xb3, 0xb8, 0xe2, 0xcc,
	0x8f, 0x64, 0xbd, 0xc8, 0x0f, 0x47, 0xa2, 0x9e, 0x8d, 0xa5, 0x80, 0x7e, 0x03, 0x18, 0x84, 0x49,
	0xca, 0x64, 0x8c, 0x2c, 0x6b, 0x0b, 0x8d, 0x08, 0xda, 0x07, 0x7b, 0xe4, 0x67, 0x56, 0x43, 0x66,
	0xe4, 0x0a, 0x61, 0x2c, 0x83, 0x1e, 0x06, 0x15, 0x53, 0x68, 0xf5, 0x30, 0xf0, 0xfe, 0x02, 0x38,
	0xef, 0xbd, 0x25, 0x7d, 0x26, 0xc0, 0x20, 0x30, 0xd8, 0xfd, 0x38, 0xc3, 0x21, 0xbe, 0x55, 0x84,
	0x3e, 0x8d, 0xf8, 0xaa, 0x81, 0xc5, 0x89, 0xeb, 0x30, 0x12, 0x29, 0xa3, 0x96, 0x19, 0x39, 0x60,
	0xbf, 0xcf, 0x14, 0x41, 0x36, 0x96, 0x02, 0xfa, 0x13, 0x8c, 0x5b, 0x92, 0xf4, 0x04, 0xd4, 0x72,
	0xdd, 0x39, 0x9a, 0xf1, 0x7e, 0xf4, 0x9a, 0x24, 0x3d, 0x2c, 0xac, 0xe8, 0x1f, 0x40, 0x7d, 0x1a,
	0x8d, 0x7d, 0x16, 0xf6, 0xc2, 0x51, 0xc8, 0xee, 0xaf, 0x44, 0x8c, 0xb1, 0x22, 0xe6, 0xa7, 0x9c,
	0x2f, 0x57, 0xa1, 0x5f, 0xa0, 0x48, 0x45, 0x2f, 0xaa, 0x3f, 0x25, 0x71, 0x3d, 0xf3, 0x93, 0x21,
	0x61, 0x95, 0xa2, 0xd4, 0x4b, 0xc9, 0xf3, 0xa1, 0xc4, 0xb3, 0x62, 0x72, 0x33, 0x21, 0x29, 0xe3,
	0x28, 0xfd, 0x09, 0xbb, 0x16, 0xdd, 0x94, 0xf2, 0x15, 0xf9, 0x63, 0x62, 0x61, 0xe5, 0x1d, 0xf6,
	0xe9, 0x24, 0x66, 0xa2, 0x43, 0x13, 0x4b, 0x81, 0x97, 0xe0, 0x8f, 0xd6, 0x39, 0x51, 0xcf, 0xa1,
	0x24, 0x2f, 0x00, 0xd4, 0x08, 0x82, 0x8c, 0xae, 0xe7, 0x55, 0xaa, 0x81, 0x11, 0x32, 0x12, 0x89,
	0x42, 0xa5, 0xfa, 0xee, 0xbc, 0xd7, 0x34, 0xa1, 0xf0, 0xf0, 0xde, 0xc0, 0xcf, 0xb9, 0x2a, 0x6a,
	0x82, 0xeb, 0x50, 0x4c, 0xc5, 0x4c, 0xab, 0x42, 0xee, 0x7c, 0x8a, 0xfc, 0xb4, 0x63, 0xe5, 0xf9,
	0xe0, 0xb5, 0x63, 0xd8, 0x92, 0x1c, 0xad, 0x91, 0xf3, 0x10, 0x4c, 0x0e, 0x33, 0xad, 0xe8, 0xd5,
	0xc2, 0xca, 0x4e, 0xa4, 0x8b, 0x47, 0x61, 0xbb, 0x45, 0x47, 0x23, 0x7a, 0xf7, 0x3c, 0xae, 0x32,
	0xfe, 0x33, 0xe8, 0x4a, 0x42, 0x55, 0x28, 0x0d, 0x44, 0xba, 0x30, 0x1e, 0x76, 0x02, 0xf5, 0x38,
	0xf3, 0x2a, 0xef, 0x04, 0xca, 0x59, 0xc1, 0xef, 0x6f, 0xd1, 0xbb, 0x81, 0x9d, 0xcb, 0x78, 0xf0,
	0x43, 0x81, 0xb7, 0xc0, 0x99, 0x95, 0x5c, 0x03, 0xfa, 0x17, 0x0d, 0x76, 0x30, 0x19, 0x86, 0x29,
	0x23, 0x49, 0x86, 0x3d, 0x77, 0x94, 0xf4, 0x85, 0xa3, 0xe4, 0x82, 0x35, 0xf6, 0xd3, 0xf4, 0x8e,
	0x26, 0x19, 0xae, 0xa9, 0x3c, 0x3b, 0x58, 0xc6, 0xea, 0x83, 0x65, 0x3e, 0x7a, 0xb0, 0x8a, 0xf9,
	0x83, 0xf5, 0xc2, 0xb0, 0x34, 0x47, 0xf7, 0xc6, 0xe0, 0xcc, 0x30, 0xae, 0x31, 0x8a, 0x35, 0x30,
	0x78, 0x1f, 0xcb, 0x76, 0x2a, 0xbb, 0xc8, 0x58, 0x78, 0x78, 0x6d, 0xd8, 0xea, 0xd2, 0x61, 0x18,
	0x2f, 0xa5, 0x44, 0x7b, 0x84, 0x12, 0x3d, 0x4f, 0x89, 0xf7, 0x51, 0x83, 0x6d, 0x95, 0x69, 0x0d,
	0xe0, 0xd9, 0x34, 0xe9, 0x4f, 0x9d, 0x0c, 0xd1, 0x5e, 0xe1, 0xa9, 0xf6, 0x0e, 0x8f, 0xc1, 0x10,
	0x37, 0x13, 0xa0, 0xd8, 0x69, 0x9f, 0x9d, 0xe3, 0xa6, 0xb3, 0x81, 0x4a, 0xb0, 0xd9, 0x6e, 0x9e,
	0x35, 0x71, 0xe7, 0x3f, 0x47, 0x43, 0x16, 0x18, 0xdd, 0xce, 0x69, 0xd3, 0xd1, 0x91, 0x0d, 0xe6,
	0xc5, 0xff, 0x0d, 0xdc, 0x74, 0x0a, 0x5c, 0xf9, 0xf2, 0xfc, 0xe2, 0x95, 0x63, 0xd4, 0x3f, 0x69,
	0x60, 0xf0, 0xec, 0xe8, 0x5f, 0xb0, 0x5b, 0x84, 0xf5, 0xaf, 0x85, 0xf0, 0xeb, 0xe2, 0x6a, 0x2b,
	0xf6, 0xdc, 0xca, 0x43, 0x83, 0x6c, 0xd0, 0xdb, 0x40, 0x5d, 0xd8, 0x54, 0xd7, 0x0b, 0xfd, 0x9e,
	0xeb, 0xeb, 0xc1, 0xe1, 0x74, 0xff, 0x58, 0x69, 0xcf, 0xb2, 0xd5, 0x3f, 0x6b, 0x50, 0x94, 0x0b,
	0x8d, 0x4e, 0xc0, 0xe6, 0x3e, 0x52, 0xd8, 0xcb, 0x21, 0x98, 0xdf, 0x54, 0xd7, 0x5d, 0x66, 0x9a,
	0xc2, 0x3b, 0x85, 0x2d, 0x4c, 0x22, 0x7a, 0x4b, 0x54, 0xa2, 0xfd, 0x1c, 0xab, 0xf9, 0xa5, 0x77,
	0x0f, 0x96, 0x1b, 0xa7, 0xe8, 0x3e, 0x68, 0xb0, 0xd9, 0xe8, 0xcb, 0x7f, 0x46, 0x1b, 0xac, 0x6c,
	0xa6, 0xf3, 0x49, 0x17, 0xb6, 0x31, 0x9f, 0x74, 0x71, 0x0d, 0xbc, 0x0d, 0x74, 0x0c, 0xa6, 0x18,
	0x30, 0x94, 0x63, 0x79, 0x7e, 0x7a, 0xdd, 0xbd, 0x25, 0x96, 0x2c, 0xbe, 0x57, 0x14, 0xea, 0xbf,
	0xbf, 0x05, 0x00, 0x00, 0xff, 0xff, 0x80, 0x54, 0x90, 0x03, 0x1c, 0x09, 0x00, 0x00,
}
